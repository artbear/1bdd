//----------------------------------------------------------
//This Source Code Form is subject to the terms of the
//Mozilla Public License, v.2.0. If a copy of the MPL
//was not distributed with this file, You can obtain one
//at http://mozilla.org/MPL/2.0/.
//----------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////////////////////
//
// Тест для генератора BDD-шагов сценария в формате OneScript на базе файлов Gherkin
//
/////////////////////////////////////////////////////////////////////////////////////////////////

#Использовать logos
#Использовать asserts
#Использовать tempfiles

#Использовать ".."

Перем юТест;
Перем Лог;
Перем ЧитательГеркин;
Перем ИсполнительБДД;
Перем МенеджерВременныхФайлов;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт

	юТест = ЮнитТестирование;

	МассивТестов = Новый Массив;
	МассивТестов.Добавить("Тест_ВыполнитьФичуСПодготовленнымИсполнителемШагов");
	МассивТестов.Добавить("Тест_ВыполнитьФичуСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов");
	МассивТестов.Добавить("Тест_ВыполнитьФичуСКлючевымиСловамиШаговСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов");
	
	МассивТестов.Добавить("Тест_ВыполнитьФичуСПодготовленнымИсполнителемШаговИВыдатьОтчетJUnit");
	МассивТестов.Добавить("Тест_ВыполнитьФичуСПодготовленнымИсполнителемШаговИВыдатьОтчетSonarqubeGenExec");

	Возврат МассивТестов;

КонецФункции

Процедура ПередЗапускомТеста() Экспорт
	МенеджерВременныхФайлов = Новый МенеджерВременныхФайлов;
КонецПроцедуры

Процедура ПослеЗапускаТеста() Экспорт
	МенеджерВременныхФайлов.Удалить();
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСПодготовленнымИсполнителемШагов() Экспорт
	// ВключитьОтладкуИсполнителя(УровниЛога.Отладка);
	ИмяФичи = "БезПараметров";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);

	ВозможныеСтатусыВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения();

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	Ожидаем.Что(РезультатыВыполнения, "Ожидали, что дерево фич будет получено как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");

	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);

	Сценарии = Функциональность0.Строки;
	Ожидаем.Что(Сценарии, "Ожидали, что найдем правильное число сценариев").ИмеетДлину(3);

	Описание1 = Сценарии[0];
	Ожидаем.Что(Описание1.СтатусВыполнения, "Ожидали, что статус выполнения Описание1 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Описание1.Тело, "Ожидали, что найдем правильное тело Описание1, а это не так").Равно("Как Разработчик");

	Сценарий0 = Сценарии[2];
	Ожидаем.Что(Сценарий0.СтатусВыполнения, "Ожидали, что статус выполнения Сценарий0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Сценарий0.Тело, "Ожидали, что найдем правильное тело сценария 0, а это не так").Равно("Ничего не делаем");

	Шаги = Сценарий0.Строки;
	Ожидаем.Что(Шаги, "Ожидали, что найдем правильное число шагов").ИмеетДлину(2);

	Шаг0 = Шаги[0];
	Ожидаем.Что(Шаг0.СтатусВыполнения, "Ожидали, что статус выполнения Шаг0 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг0.Тело, "Ожидали, что найдем правильное тело шага 0, а это не так").Равно("я ничего не делаю");

	Шаг1 = Шаги[1];
	Ожидаем.Что(Шаг1.СтатусВыполнения, "Ожидали, что статус выполнения Шаг1 будет пройден, а это не так").Равно(ВозможныеСтатусыВыполнения.Пройден);
	Ожидаем.Что(Шаг1.Тело, "Ожидали, что найдем правильное тело шага 1, а это не так").Равно("ничего не происходит");
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов() Экспорт
	ИмяФичи = "СтроковыеПараметры";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);

	СтатусВыполненияПройден = ИсполнительБДД.ВозможныеСтатусыВыполнения().Пройден;

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	Ожидаем.Что(РезультатыВыполнения, "Ожидали, что дерево фич будет получено как дерево значений, а это не так").ИмеетТип("ДеревоЗначений");


	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет пройден, а это не так").Равно(СтатусВыполненияПройден);

	Сценарии = Функциональность0.Строки;
	Ожидаем.Что(Сценарии, "Ожидали, что найдем правильное число сценариев").ИмеетДлину(1);

	Сценарий0 = Сценарии[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Сценарий0 будет пройден, а это не так").Равно(СтатусВыполненияПройден);
	Ожидаем.Что(Сценарий0.Тело, "Ожидали, что найдем правильное тело сценария 0, а это не так").Равно("Использование параметров Строка");

	Шаги = Сценарий0.Строки;
	ПроверитьСтатусВыполненияШагов(Шаги, 2, СтатусВыполненияПройден);
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСКлючевымиСловамиШаговСоСтроковымиПараметрамиСПодготовленнымИсполнителемШагов() Экспорт
	ИмяФичи = "СтроковыеПараметры_ВсеКлючевыеПоля";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);

	СтатусВыполненияПройден = ИсполнительБДД.ВозможныеСтатусыВыполнения().Пройден;

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);


	Функциональность0 = РезультатыВыполнения.Строки[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Функциональность0 будет пройден, а это не так").Равно(СтатусВыполненияПройден);

	Сценарии = Функциональность0.Строки;
	Сценарий0 = Сценарии[0];
	Ожидаем.Что(Функциональность0.СтатусВыполнения, "Ожидали, что статус выполнения Сценарий0 будет пройден, а это не так").Равно(СтатусВыполненияПройден);

	Шаги = Сценарий0.Строки;
	ПроверитьСтатусВыполненияШагов(Шаги, 4, СтатусВыполненияПройден);
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСПодготовленнымИсполнителемШаговИВыдатьОтчетJUnit() Экспорт
	// ВключитьОтладкуИсполнителя(УровниЛога.Отладка);
	ИмяФичи = "БезПараметров";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);
	ПутьОтчетаJUnit = ВременныеФайлы.НовоеИмяФайла("xml");

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	ВозможныеСтатусыВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения();
	СтатусВыполнения = ВозможныеСтатусыВыполнения.НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
	КонецЕсли;

	ГенераторОтчетаJUnit = Новый ГенераторОтчетаJUnit;
	ГенераторОтчетаJUnit.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаJUnit);

	Файл = Новый Файл(ПутьОтчетаJUnit);
	Ожидаем.Что(Файл.Существует(), "ПутьОтчетаJUnit Существует " + ПутьОтчетаJUnit)
		.Равно(Истина);
		
КонецПроцедуры

Процедура Тест_ВыполнитьФичуСПодготовленнымИсполнителемШаговИВыдатьОтчетSonarqubeGenExec() Экспорт
	
	ИмяФичи = "ПадающийШаг";
	ФайлФичи = ПолучитьФайлФичи(ИмяФичи);
	
	ПутьОтчетаSonarqubeGenExec = ВременныеФайлы.НовоеИмяФайла("xml");

	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(ФайлФичи);

	ВозможныеСтатусыВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения();
	СтатусВыполнения = ВозможныеСтатусыВыполнения.НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
	КонецЕсли;

	ГенераторОтчетаSonarqubeGenExec = Новый ГенераторОтчетаSonarqubeGenExec;
	ГенераторОтчетаSonarqubeGenExec.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаSonarqubeGenExec);

	Файл = Новый Файл(ПутьОтчетаSonarqubeGenExec);
	Ожидаем.Что(Файл.Существует(), "ПутьОтчетаSonarqubeGenExec Существует " + ПутьОтчетаSonarqubeGenExec)
		.Равно(Истина);
		
КонецПроцедуры

//TODO ПолучитьФайлФичи дублируется с соседними тестами
Функция ПолучитьФайлФичи(ИмяФичи)
	ФайлФичи = Новый Файл(ОбъединитьПути(ПолучитьПутьФич(), ИмяФичи + ".feature"));
	ВременныйКаталогФичи = ПодготовитьТестовыйКаталогСФичей(ФайлФичи);

	ФайлФичи = Новый Файл(ОбъединитьПути(ВременныйКаталогФичи.ПолноеИмя, ИмяФичи + ".feature"));
	Возврат ФайлФичи;
КонецФункции

Функция ПолучитьПутьФич()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tests", "fixtures");
КонецФункции // ПолучитьПутьФич()

//TODO ПодготовитьТестовыйКаталогСФичей дублируется с соседними тестами
Функция ПодготовитьТестовыйКаталогСФичей(ФайлФичи)
	КаталогФичи = МенеджерВременныхФайлов.СоздатьКаталог();
	Лог.Отладка("Использую временный каталог " + КаталогФичи);
	КопироватьФайл(ФайлФичи.ПолноеИмя, ОбъединитьПути(КаталогФичи, ФайлФичи.Имя ));

	ИмяИсполнителяШагов = ФайлФичи.ИмяБезРасширения + ".os";
	КаталогИсполнителяШагов = ОбъединитьПути(КаталогФичи, "step_definitions" );
	СоздатьКаталог(КаталогИсполнителяШагов);

	ФайлИсполнителяШагов = Новый Файл(ОбъединитьПути(КаталогИсполнителяШагов, ИмяИсполнителяШагов ));
	КопироватьФайл(ОбъединитьПути(ФайлФичи.Путь, "step_definitions", ИмяИсполнителяШагов), ФайлИсполнителяШагов.ПолноеИмя);

	Ожидаем.Что(ФайлИсполнителяШагов.Существует(), "Ожидаем, что файл исполнителя шагов существует, а его нет").Равно(Истина);
	Возврат Новый Файл(КаталогФичи);
КонецФункции

Процедура ПроверитьСтатусВыполненияШагов(Шаги, Количество, СтатусВыполнения)
	Ожидаем.Что(Шаги, "Ожидали, что найдем правильное число шагов").ИмеетДлину(Количество);

	Индекс = 0;
	Для Каждого Шаг Из Шаги Цикл
		Ожидаем.Что(Шаг.СтатусВыполнения, "Ожидали, что статус выполнения Шаг" + Индекс + " будет пройден, а это не так").Равно(СтатусВыполнения);
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ВключитьОтладкуИсполнителя(НовыйУровеньЛога)
	ДопЛог = Логирование.ПолучитьЛог(ИсполнительБДД.ИмяЛога());
	ДопЛог.УстановитьУровень(НовыйУровеньЛога);
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Программный интерфейс

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("bdd-tests");

	ИсполнительБДД = Новый ИсполнительБДД;
	ЧитательГеркин = Новый ЧитательГеркин;

КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Точка входа

Инициализация();
