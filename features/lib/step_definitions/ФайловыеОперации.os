// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать asserts
#Использовать fs
#Использовать logos

Перем БДД; //контекст фреймворка 1bdd
Перем Лог;
Перем ЭтоWindows;

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогИСохраняюЕгоВКонтекст");
	ВсеШаги.Добавить("ЯУстанавливаюВременныйКаталогКакРабочийКаталог");
	ВсеШаги.Добавить("ЯСоздаюКаталогВРабочемКаталоге");
	ВсеШаги.Добавить("ЯСоздаюКаталогВПодкаталогеРабочегоКаталога");
	ВсеШаги.Добавить("ЯСоздаюФайлВРабочемКаталоге");
	ВсеШаги.Добавить("ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной");
	ВсеШаги.Добавить("ВРабочемКаталогеСуществуетКаталог");
	ВсеШаги.Добавить("ВПодкаталогеРабочегоКаталогаСуществуетКаталог");
	ВсеШаги.Добавить("ЯСоздаюКаталог");
	ВсеШаги.Добавить("КаталогСуществует");
	ВсеШаги.Добавить("КаталогНеСуществует");
	ВсеШаги.Добавить("ЯСоздаюКаталогВнутриКаталога");
	ВсеШаги.Добавить("КаталогВнутриКаталогаСуществует");
	ВсеШаги.Добавить("КаталогВнутриКаталогаНеСуществует");
	ВсеШаги.Добавить("ЯСоздаюФайлВПодкаталогеРабочегоКаталога");
	ВсеШаги.Добавить("ВРабочемКаталогеСуществуетФайл");
	ВсеШаги.Добавить("ВПодкаталогеРабочегоКаталогаСуществуетФайл");
	ВсеШаги.Добавить("ЯСоздаюФайл");
	ВсеШаги.Добавить("ФайлСуществует");
	ВсеШаги.Добавить("ФайлНеСуществует");
	ВсеШаги.Добавить("ЯСоздаюФайлВнутриКаталога");
	ВсеШаги.Добавить("ФайлВнутриКаталогаСуществует");
	ВсеШаги.Добавить("ФайлВнутриКаталогаНеСуществует");
	ВсеШаги.Добавить("ЯКопируюФайлВКаталог");
	ВсеШаги.Добавить("ЯКопируюФайлПроектаВКаталог");
	ВсеШаги.Добавить("ЯКопируюФайлИзКаталогаПроектаВРабочийКаталог");
	ВсеШаги.Добавить("ЯКопируюФайлИзКаталогаПроектаВПодкаталогРабочегоКаталога");
	ВсеШаги.Добавить("ЯКопируюКаталогИзКаталогаПроектаВРабочийКаталог");
	ВсеШаги.Добавить("ЯКопируюКаталогИзКаталогаПроектаВПодкаталогРабочегоКаталога");
	ВсеШаги.Добавить("ЯУдаляюКаталог");
	ВсеШаги.Добавить("ЯУдаляюФайл");
	ВсеШаги.Добавить("ЯУстановилРабочийКаталогКакТекущийКаталог");
	ВсеШаги.Добавить("ЯПоказываюТекущийКаталог");
	ВсеШаги.Добавить("ЯУстановилПодкаталогРабочегоКаталогаКакТекущийКаталог");
	ВсеШаги.Добавить("ЯВосстановилПредыдущийКаталог");
	ВсеШаги.Добавить("ЯСохраняюКаталогПроектаВКонтекст");
	ВсеШаги.Добавить("ЯПоказываюКаталогПроекта");
	ВсеШаги.Добавить("ЯПоказываюРабочийКаталог");
	ВсеШаги.Добавить("ФайлВРабочемКаталогеСодержит");
	ВсеШаги.Добавить("ФайлВРабочемКаталогеНеСодержит");
	ВсеШаги.Добавить("ФайлСодержит");
	ВсеШаги.Добавить("ФайлНеСодержит");
	ВсеШаги.Добавить("ЯСоздаюФайлСТекстом");
	ВсеШаги.Добавить("ЯПоказываюТекстФайла");
	ВсеШаги.Добавить("ЯПоказываюСтрокиФайла");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
КонецПроцедуры

//Я создаю временный каталог и сохраняю его в контекст
Процедура ЯСоздаюВременныйКаталогИСохраняюЕгоВКонтекст() Экспорт
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();
	БДД.СохранитьВКонтекст("ВременныйКаталог", ВременныйКаталог);
КонецПроцедуры

//Я устанавливаю временный каталог как рабочий каталог
Процедура ЯУстанавливаюВременныйКаталогКакРабочийКаталог() Экспорт
	БДД.СохранитьВКонтекст("РабочийКаталог", БДД.ПолучитьИзКонтекста("ВременныйКаталог"));
КонецПроцедуры

//Я создаю каталог "folder0" в рабочем каталоге
Процедура ЯСоздаюКаталогВРабочемКаталоге(Знач ПутьНовогоКаталога) Экспорт
	ПутьНовогоКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьНовогоКаталога);
	НовыйПуть = ОбъединитьПути(РабочийКаталог(), ПутьНовогоКаталога);
	СоздатьКаталог(НовыйПуть);
КонецПроцедуры

//Я создаю каталог "folder02" в подкаталоге "folder0" рабочего каталога
Процедура ЯСоздаюКаталогВПодкаталогеРабочегоКаталога(Знач ПутьНовогоКаталога, Знач ПутьКаталога) Экспорт
	ПутьНовогоКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьНовогоКаталога);
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	НовыйПуть = ОбъединитьПути(РабочийКаталог(), ПутьКаталога, ПутьНовогоКаталога);
	СоздатьКаталог(НовыйПуть);
КонецПроцедуры

//Я создаю временный каталог и сохраняю его в переменной "СпециальныйКаталог"
Процедура ЯСоздаюВременныйКаталогИСохраняюЕгоВПеременной(Знач ИмяПеременной) Экспорт
	ВременныйКаталог = ВременныеФайлы.СоздатьКаталог();

	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);
КонецПроцедуры

//Я создаю каталог "СпециальныйКаталог/folder0/folder01"
Процедура ЯСоздаюКаталог(Знач ПутьКаталога) Экспорт
	НовыйПуть = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	СоздатьКаталог(НовыйПуть);
КонецПроцедуры

//Я создаю каталог "folder1/folder11" внутри каталога "СпециальныйКаталог"
Процедура ЯСоздаюКаталогВнутриКаталога(Знач ЧтоСоздаем, Знач ГдеСоздаем) Экспорт
	ЧтоСоздаем = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ЧтоСоздаем);
	ГдеСоздаем = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ГдеСоздаем);
	НовыйПуть = ОбъединитьПути(ГдеСоздаем, ЧтоСоздаем);
	СоздатьКаталог(НовыйПуть);
КонецПроцедуры

//Я создаю файл "file0.txt" в рабочем каталоге
Процедура ЯСоздаюФайлВРабочемКаталоге(Знач ПутьФайла) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	НовыйПуть = ОбъединитьПути(РабочийКаталог(), ПутьФайла);
	СоздатьФайлПример(НовыйПуть);
КонецПроцедуры

//Я создаю файл "file02" в подкаталоге "folder0" рабочего каталога
Процедура ЯСоздаюФайлВПодкаталогеРабочегоКаталога(Знач ПутьФайла, Знач ПутьКаталога) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	НовыйПуть = ОбъединитьПути(РабочийКаталог(), ПутьКаталога, ПутьФайла);
	СоздатьФайлПример(НовыйПуть);
КонецПроцедуры

//Я создаю файл "СпециальныйКаталог/folder0/file01.txt"
Процедура ЯСоздаюФайл(Знач ПутьФайла) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	СоздатьФайлПример(ПутьФайла);
КонецПроцедуры

//Я создаю файл "folder0/file01.txt" внутри каталога "СпециальныйКаталог"
Процедура ЯСоздаюФайлВнутриКаталога(Знач ПутьФайла, Знач ПутьКаталога) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);

	НовыйПуть = ОбъединитьПути(ПутьКаталога, ПутьФайла);
	СоздатьФайлПример(НовыйПуть);
КонецПроцедуры

//Я копирую файл "tests/fixtures/step_definitions/БезПараметров.os" в каталог "РабочийКаталог"
Процедура ЯКопируюФайлВКаталог(Знач ПутьФайла, Знач КаталогКуда) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	КаталогКуда = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(КаталогКуда);
	КаталогКуда = ЗаменитьШаблоныВПараметрахКоманды(КаталогКуда);

	ФайлСуществует(ПутьФайла);

	Лог.Отладка("ПутьФайла %1", ПутьФайла);
	Лог.Отладка("КаталогКуда %1", КаталогКуда);

	Файл = Новый Файл(ПутьФайла);
	ИмяФайлаПриемника = ОбъединитьПути(КаталогКуда, Файл.Имя);
	Лог.Отладка("ОбъединитьПути(ТекущийКаталог(), Файл.Имя) %1", ИмяФайлаПриемника);

	КопироватьФайл(ПутьФайла, ИмяФайлаПриемника);

	ФайлСуществует(ИмяФайлаПриемника);
КонецПроцедуры

Процедура ЯКопируюФайлПроектаВКаталог(Знач ПутьФайла, Знач КаталогКуда) Экспорт
	ПутьФайла = ОбъединитьПути(КаталогПроекта(), ПутьФайла);

	КаталогКуда = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(КаталогКуда);
	КаталогКуда = ЗаменитьШаблоныВПараметрахКоманды(КаталогКуда);

	ФайлСуществует(ПутьФайла);

	Лог.Отладка("ПутьФайла %1", ПутьФайла);
	Лог.Отладка("КаталогПроекта() %1", КаталогПроекта());
	Лог.Отладка("КаталогКуда %1", КаталогКуда);

	Файл = Новый Файл(ПутьФайла);
	ИмяФайлаПриемника = ОбъединитьПути(КаталогКуда, Файл.Имя);
	Лог.Отладка("ОбъединитьПути(ТекущийКаталог(), Файл.Имя) %1", ИмяФайлаПриемника);

	КопироватьФайл(ПутьФайла, ИмяФайлаПриемника);

	ФайлСуществует(ИмяФайлаПриемника);
КонецПроцедуры

//Я копирую файл "fixture.epf" из каталога "tests" проекта в рабочий каталог
Процедура ЯКопируюФайлИзКаталогаПроектаВРабочийКаталог(Знач ПутьФайла, Знач ПодКаталогПроекта) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПодКаталогПроекта = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПодКаталогПроекта);

	ПолныйПутьФайла = ОбъединитьПути(БДД.КаталогПроверяемогоПроекта(), ПодКаталогПроекта, ПутьФайла);
	Файл = Новый Файл(ПолныйПутьФайла);
	КопироватьФайл(ПолныйПутьФайла, ОбъединитьПути(РабочийКаталог(), Файл.Имя));
КонецПроцедуры

//Я копирую файл "fixture.epf" из каталога "tests" проекта в подкаталог "folder0" рабочего каталога
Процедура ЯКопируюФайлИзКаталогаПроектаВПодкаталогРабочегоКаталога(Знач ПутьФайла, Знач ПодКаталогПроекта,
		Знач ПутьПодКаталога) Экспорт

	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПодКаталогПроекта = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПодКаталогПроекта);
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);

	ПолныйПутьФайла = ОбъединитьПути(БДД.КаталогПроверяемогоПроекта(), ПодКаталогПроекта, ПутьФайла);
	Файл = Новый Файл(ПолныйПутьФайла);
	КопироватьФайл(ПолныйПутьФайла, ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога, Файл.Имя));
КонецПроцедуры

//Я копирую каталог "fixtures" из каталога "tests" проекта в рабочий каталог
Процедура ЯКопируюКаталогИзКаталогаПроектаВРабочийКаталог(Знач ПутьНовогоКаталога, Знач ПодКаталогПроекта) Экспорт
	ПутьНовогоКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьНовогоКаталога);
	ПодКаталогПроекта = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПодКаталогПроекта);

	ПолныйПутьКаталога = ОбъединитьПути(БДД.КаталогПроверяемогоПроекта(), ПодКаталогПроекта, ПутьНовогоКаталога);
	ОбъектКаталога = Новый Файл(ПолныйПутьКаталога);
	ПутьНовогоКаталога = ОбъединитьПути(РабочийКаталог(), ОбъектКаталога.Имя);
	ФС.ОбеспечитьКаталог(ПутьНовогоКаталога);
	ФС.КопироватьСодержимоеКаталога(ПолныйПутьКаталога, ПутьНовогоКаталога);
КонецПроцедуры

//Я копирую каталог "fixtures" из каталога "tests" проекта в подкаталог "folder0" рабочего каталога
Процедура ЯКопируюКаталогИзКаталогаПроектаВПодкаталогРабочегоКаталога(Знач ПутьНовогоКаталога, Знач ПодКаталогПроекта,
		Знач ПутьПодКаталога) Экспорт

	ПутьНовогоКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьНовогоКаталога);
	ПодКаталогПроекта = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПодКаталогПроекта);
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);

	ПолныйПутьКаталога = ОбъединитьПути(БДД.КаталогПроверяемогоПроекта(), ПодКаталогПроекта, ПутьНовогоКаталога);
	ОбъектКаталога = Новый Файл(ПолныйПутьКаталога);

	ПутьНовогоКаталога = ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога, ОбъектКаталога.Имя);
	ФС.ОбеспечитьКаталог(ПутьНовогоКаталога);
	ФС.КопироватьСодержимоеКаталога(ПолныйПутьКаталога, ПутьНовогоКаталога);
КонецПроцедуры

//В рабочем каталоге существует каталог "folder0"
Процедура ВРабочемКаталогеСуществуетКаталог(Знач ПутьКаталога) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьКаталога, ПолныйПуть, Истина, РабочийКаталог());
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталог <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//В подкаталоге "folder0" рабочего каталога существует каталог "folder02"
Процедура ВПодкаталогеРабочегоКаталогаСуществуетКаталог(Знач ПутьПодКаталога, Знач ПутьПроверяемогоКаталога) Экспорт
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьПроверяемогоКаталога, ПолныйПуть, Истина,
		ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталог <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//В рабочем каталоге существует файл "file0.txt"
Процедура ВРабочемКаталогеСуществуетФайл(Знач ПутьФайла) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть, Ложь, РабочийКаталог());
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файл <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//В подкаталоге "folder0" рабочего каталога существует файл "file02"
Процедура ВПодкаталогеРабочегоКаталогаСуществуетФайл(Знач ПутьПодКаталога, Знач ПутьФайла) Экспорт
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть, Ложь,
		ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файл <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//Каталог "folder0/folder01" существует
Процедура КаталогСуществует(Знач ПутьКаталога) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьКаталога, ПолныйПуть, Истина);
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталог <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//Каталог "folder0/folder01" не существует
Процедура КаталогНеСуществует(Знач ПутьКаталога) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьКаталога, ПолныйПуть, Истина);
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталога <%1> нет, а он существует!", ПолныйПуть)).ЭтоЛожь();
КонецПроцедуры

//Файл "folder0/file01.txt" существует
Процедура ФайлСуществует(Знач ПутьФайла) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть);
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файл <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//Файл "folder0/file01.txt" не существует
Процедура ФайлНеСуществует(Знач ПутьФайла) Экспорт
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть);
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файла <%1> нет, а он существует!", ПолныйПуть)).ЭтоЛожь();
КонецПроцедуры

//Каталог "folder01" внутри каталога "СпециальныйКаталог" существует
Процедура КаталогВнутриКаталогаСуществует(Знач ПутьПроверяемогоКаталога, Знач ПутьПодКаталога) Экспорт
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьПроверяемогоКаталога, ПолныйПуть, Истина,
		ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталог <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//Каталог "folder0/folder01" внутри каталога "СпециальныйКаталог" не существует
Процедура КаталогВнутриКаталогаНеСуществует(Знач ПутьПроверяемогоКаталога, Знач ПутьПодКаталога) Экспорт
	ПутьПодКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьПодКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьПроверяемогоКаталога, ПолныйПуть, Истина,
		ОбъединитьПути(РабочийКаталог(), ПутьПодКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что каталога <%1> нет, а он существует!", ПолныйПуть)).ЭтоЛожь();
КонецПроцедуры

//Файл "file01.txt" внутри каталога "СпециальныйКаталог" существует
Процедура ФайлВнутриКаталогаСуществует(Знач ПутьФайла, Знач ПутьКаталога) Экспорт
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть, Ложь,
		ОбъединитьПути(РабочийКаталог(), ПутьКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файл <%1> существует, а его нет!", ПолныйПуть)).ЭтоИстина();
КонецПроцедуры

//Файл "folder0/file01.txt" внутри каталога "СпециальныйКаталог" не существует
Процедура ФайлВнутриКаталогаНеСуществует(Знач ПутьФайла, Знач ПутьКаталога) Экспорт
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	ПолныйПуть = "";
	ФайлСуществует = ФайлИлиКаталогСуществует(ПутьФайла, ПолныйПуть, Ложь,
		ОбъединитьПути(РабочийКаталог(), ПутьКаталога));
	Ожидаем.Что(ФайлСуществует, СтрШаблон("Ожидаем, что файла <%1> нет, а он существует!", ПолныйПуть)).ЭтоЛожь();
КонецПроцедуры

Функция ФайлИлиКаталогСуществует(Знач ПутьФайла, ПолныйПуть, Знач ЭтоКаталог = Ложь, Знач ИсходныйКаталог = "")

	Лог.Отладка("ПутьФайла %1", ПутьФайла);
	Лог.Отладка("ПолныйПуть %1", ПолныйПуть);
	Лог.Отладка("ЭтоКаталог %1", ЭтоКаталог);
	Лог.Отладка("ИсходныйКаталог %1", ИсходныйКаталог);

	Если ИсходныйКаталог = "" Тогда
		ИсходныйКаталог = ТекущийКаталог();
	КонецЕсли;
	Лог.Отладка("Установили ИсходныйКаталог %1", ИсходныйКаталог);

	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	Лог.Отладка("Вычислили ПутьФайла %1", ПутьФайла);

	РегулярноеВыражение = Новый РегулярноеВыражение("[\*,\?]");
	ПутьБезРегулярок = Не РегулярноеВыражение.Совпадает(ПутьФайла);

	Лог.Отладка("ПутьБезРегулярок %1", ПутьБезРегулярок);

	Рез = Ложь;
	//FIXME: убрать ПутьБезРегулярок после решения https://github.com/EvilBeaver/OneScript/issues/511
	Если ПутьБезРегулярок Тогда
		ПолныйПуть = (Новый Файл(ОбъединитьПути(ИсходныйКаталог, ПутьФайла))).ПолноеИмя;
		Лог.Отладка("Установили ПолныйПуть %1", ПолныйПуть);
		Объект = Новый Файл(ПолныйПуть);
		Рез = Объект.Существует();
		Лог.Отладка("Объект.Существует() ? %1", Рез);
		Если Рез Тогда
			Рез = ЭтоКаталог И Объект.ЭтоКаталог() Или Не ЭтоКаталог И Не Объект.ЭтоКаталог();
			Лог.Отладка("новый Рез %1
			|	ЭтоКаталог И Объект.ЭтоКаталог() Или Не ЭтоКаталог И Не Объект.ЭтоКаталог()", Рез);
		КонецЕсли;
	Иначе
		Попытка
			МассивФайлов = НайтиФайлы(ИсходныйКаталог, ПутьФайла);
			Рез = МассивФайлов.Количество() > 0;
			Лог.Отладка("МассивФайлов.Количество() %1", МассивФайлов.Количество());
			Лог.Отладка("Рез %1
			|	МассивФайлов.Количество() > 0", Рез);
		Исключение
			Лог.Отладка("ОписаниеОшибки %1", ОписаниеОшибки());
			Рез = Ложь;
		КонецПопытки;
		Если Рез Тогда
			Объект = МассивФайлов[0];
			Лог.Отладка("Объект %1", Объект.ПолноеИмя);
			Рез = ЭтоКаталог И Объект.ЭтоКаталог() Или Не ЭтоКаталог И Не Объект.ЭтоКаталог();
			Лог.Отладка("Рез %1
			|	ЭтоКаталог И Объект.ЭтоКаталог() Или Не ЭтоКаталог И Не Объект.ЭтоКаталог()", Рез);
		КонецЕсли;
	КонецЕсли;
	Возврат Рез;
КонецФункции

//Я установил рабочий каталог как текущий каталог
Процедура ЯУстановилРабочийКаталогКакТекущийКаталог() Экспорт
	СтекТекущихКаталогов = ПолучитьСтекТекущихКаталогов();
	СтекТекущихКаталогов.Вставить(0, ТекущийКаталог());

	УстановитьТекущийКаталог(РабочийКаталог());
КонецПроцедуры

//Я установил подкаталог "folder0" рабочего каталога как текущий каталог
Процедура ЯУстановилПодкаталогРабочегоКаталогаКакТекущийКаталог(Знач ПутьКаталога) Экспорт
	ПутьКаталога = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьКаталога);
	ПолныйПутьКаталога = ОбъединитьПути(РабочийКаталог(), ПутьКаталога);

	СтекТекущихКаталогов = ПолучитьСтекТекущихКаталогов();
	СтекТекущихКаталогов.Вставить(0, ТекущийКаталог());

	УстановитьТекущийКаталог(ПолныйПутьКаталога);
КонецПроцедуры

//Я восстановил предыдущий каталог
Процедура ЯВосстановилПредыдущийКаталог() Экспорт
	СтекТекущихКаталогов = ПолучитьСтекТекущихКаталогов();
	Если Не ЗначениеЗаполнено(СтекТекущихКаталогов) Тогда
		ВызватьИсключение "Невозможно восстановить каталог, т.к. стек текущих каталогов пуст";
	КонецЕсли;

	УстановитьТекущийКаталог(СтекТекущихКаталогов[0]);
	СтекТекущихКаталогов.Удалить(0);
КонецПроцедуры

//Я сохраняю каталог проекта в контекст
Процедура ЯСохраняюКаталогПроектаВКонтекст() Экспорт
	КаталогТекущегоПроекта = БДД.КаталогПроверяемогоПроекта();
	Лог.Отладка("КаталогПроекта %1", КаталогТекущегоПроекта);
	БДД.СохранитьВКонтекст("КаталогПроекта", КаталогТекущегоПроекта);
КонецПроцедуры

//Я показываю каталог проекта
Процедура ЯПоказываюКаталогПроекта() Экспорт
	Сообщить("КаталогПроекта() " + КаталогПроекта());
	// Лог.Информация("КаталогПроекта() %1", КаталогПроекта());
КонецПроцедуры

//Я показываю рабочий каталог
Процедура ЯПоказываюРабочийКаталог() Экспорт
	Сообщить(РабочийКаталог());
КонецПроцедуры

//Я показываю текущий каталог
Процедура ЯПоказываюТекущийКаталог() Экспорт
	Сообщить(ТекущийКаталог());
КонецПроцедуры

//Файл "folder0/file01.txt" в рабочем каталоге содержит "Текст файла"
Процедура ФайлВРабочемКаталогеСодержит(Знач ПутьФайла, Знач ЧтоИщем) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Файл = Новый Файл(ОбъединитьПути(РабочийКаталог(), ПутьФайла));
	ПроверитьСодержимоеФайла(Файл, ЧтоИщем);
КонецПроцедуры

//Файл "folder0/file01.txt" в рабочем каталоге не содержит "Не существующий текст"
Процедура ФайлВРабочемКаталогеНеСодержит(Знач ПутьФайла, Знач ЧтоИщем) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Файл = Новый Файл(ОбъединитьПути(РабочийКаталог(), ПутьФайла));
	ПроверитьОтсутствиеВФайле(Файл, ЧтоИщем);
КонецПроцедуры

//Файл "folder0/file01.txt" содержит "Текст файла"
Процедура ФайлСодержит(Знач ПутьФайла, Знач ЧтоИщем) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Файл = Новый Файл(ОбъединитьПути(ТекущийКаталог(), ПутьФайла));
	ПроверитьСодержимоеФайла(Файл, ЧтоИщем);
КонецПроцедуры

//Файл "folder0/file01.txt" содержит xml "Текст файла"
Процедура ФайлСодержитXml(Знач ПутьФайла, Знач ЧтоИщем) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Файл = Новый Файл(ОбъединитьПути(ТекущийКаталог(), ПутьФайла));
	ПроверитьСодержимоеФайлаXml(Файл, ЧтоИщем);
КонецПроцедуры

//Файл "folder0/file01.txt" не содержит "Не существующий текст"
Процедура ФайлНеСодержит(Знач ПутьФайла, Знач ЧтоИщем) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Файл = Новый Файл(ОбъединитьПути(ТекущийКаталог(), ПутьФайла));
	ПроверитьОтсутствиеВФайле(Файл, ЧтоИщем);
КонецПроцедуры

//Я удаляю каталог "СпециальныйКаталог/КаталогДляУдаления"
Процедура ЯУдаляюКаталог(Знач ПутьККаталогу) Экспорт
	УдалитьФайлИлиКаталог(ПутьККаталогу);
КонецПроцедуры

//Я удаляю файл "СпециальныйКаталог/ФайлДляУдаления.txt"
Процедура ЯУдаляюФайл(Знач ПутьКФайлу) Экспорт
	УдалитьФайлИлиКаталог(ПутьКФайлу);
КонецПроцедуры

//Я создаю файл "СпециальныйКаталог/ФайлСТекстом.txt" с текстом "текст178"
Процедура ЯСоздаюФайлСТекстом(Знач ПутьФайла, Знач ТекстФайла) Экспорт
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ПутьФайла, "utf-8");
	ЗаписьТекста.ЗаписатьСтроку(ТекстФайла);
	ЗаписьТекста.Закрыть();
КонецПроцедуры

//я показываю текст файла "СпециальныйКаталог/ФайлСТекстом.txt"
Процедура ЯПоказываюТекстФайла(Знач ПутьФайла) Экспорт

	Файл = ФайлПоПути(ПутьФайла);

	ТекстФайла = ПрочитатьТекстФайла(Файл);
	//ТекстФайла = ЗаменитьШаблоныВПараметрахКоманды(ТекстФайла);
	Сообщить(ТекстФайла);

КонецПроцедуры

//я показываю 2 строки файла "СпециальныйКаталог/ФайлСТекстом.txt"
Процедура ЯПоказываюСтрокиФайла(Знач КоличествоСтрок, Знач ПутьФайла) Экспорт

	Файл = ФайлПоПути(ПутьФайла);
	ТекстФайла = ПрочитатьТекстФайла(Файл);
	//ТекстФайла = ЗаменитьШаблоныВПараметрахКоманды(ТекстФайла);
	ВыводимыйТекст = "";
	Для Сч = 1 По КоличествоСтрок Цикл
		ВыводимыйТекст = ВыводимыйТекст + Символы.ПС + СтрПолучитьСтроку(ТекстФайла, Сч);
	КонецЦикла;
	Сообщить(ВыводимыйТекст);

КонецПроцедуры

//{ Служебные методы
Функция РабочийКаталог()
	Возврат БДД.ПолучитьИзКонтекста("РабочийКаталог");
КонецФункции

Функция КаталогПроекта()
	Результат = БДД.ПолучитьИзКонтекста("КаталогПроекта");
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЯСохраняюКаталогПроектаВКонтекст();
		Результат = БДД.ПолучитьИзКонтекста("КаталогПроекта");
	КонецЕсли;
	Возврат БДД.ПолучитьИзКонтекста("КаталогПроекта");
КонецФункции

Функция ПолучитьСтекТекущихКаталогов()
	СтекТекущихКаталогов = БДД.ПолучитьИзКонтекста("СтекТекущихКаталогов");
	Если СтекТекущихКаталогов = Неопределено Тогда
		СтекТекущихКаталогов = Новый Массив;
		БДД.СохранитьВКонтекст("СтекТекущихКаталогов", СтекТекущихКаталогов);
	КонецЕсли;
	Возврат СтекТекущихКаталогов;
КонецФункции // Получить()

Процедура СоздатьФайлПример(Знач ПутьФайла) Экспорт
	Лог.Отладка("СоздатьФайлПример %1", ПутьФайла);
	ЗаписьТекста = Новый ЗаписьТекста(ПутьФайла);
	ЗаписьТекста.Записать("Текст файла");
	ЗаписьТекста.Закрыть();
КонецПроцедуры

Функция ПрочитатьТекстФайла(Знач Файл, Кодировка = "UTF-8")
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(Файл.ПолноеИмя, Кодировка);

	Строка = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	Возврат Строка;
КонецФункции

Процедура ПроверитьСодержимоеФайла(Знач Файл, Знач ЧтоИщем)
	ТекстФайла = ПрочитатьТекстФайла(Файл);
	ТекстФайла = ЗаменитьШаблоныВПараметрахКоманды(ТекстФайла);
	ЧтоИщем = ЗаменитьШаблоныВПараметрахКоманды(ЧтоИщем);

	ОписаниеОшибки = СтрШаблон("Ожидали, что файл <%1> содержит `<%2>`, а это не так!", Файл.ПолноеИмя, ЧтоИщем);
	Ожидаем.Что(ТекстФайла, ОписаниеОшибки).Содержит(ЧтоИщем);
КонецПроцедуры

Процедура ПроверитьСодержимоеФайлаXml(Знач Файл, Знач ЧтоИщем)
	ТекстФайла = ПрочитатьТекстФайла(Файл);
	ТекстФайла = ЗаменитьШаблоныВПараметрахКоманды(ТекстФайла);
	ТекстФайла = СтрЗаменить(ТекстФайла, " />" , "/>");
	ЧтоИщем = ЗаменитьШаблоныВПараметрахКоманды(ЧтоИщем);
	ЧтоИщем = СтрЗаменить(ЧтоИщем, " />" , "/>");

	ОписаниеОшибки = СтрШаблон("Ожидали, что файл <%1> содержит `<%2>`, а это не так!", Файл.ПолноеИмя, ЧтоИщем);
	Ожидаем.Что(ТекстФайла, ОписаниеОшибки).Содержит(ЧтоИщем);
КонецПроцедуры

Процедура ПроверитьОтсутствиеВФайле(Знач Файл, Знач ЧтоИщем)
	ТекстФайла = ПрочитатьТекстФайла(Файл);
	ТекстФайла = ЗаменитьШаблоныВПараметрахКоманды(ТекстФайла);
	ЧтоИщем = ЗаменитьШаблоныВПараметрахКоманды(ЧтоИщем);

	ОписаниеОшибки = СтрШаблон("Ожидали, что файл <%1> не содержит `<%2>`, а это не так!", Файл.ПолноеИмя, ЧтоИщем);
	Ожидаем.Что(ТекстФайла, ОписаниеОшибки).Не_().Содержит(ЧтоИщем);
КонецПроцедуры

Функция ФайлПоПути(Знач ПутьФайла)
	ПутьФайла = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(ПутьФайла);
	ПутьФайла = ЗаменитьШаблоныВПараметрахКоманды(ПутьФайла);

	Возврат Новый Файл(ОбъединитьПути(РабочийКаталог(), ПутьФайла));
КонецФункции

Процедура УдалитьФайлИлиКаталог(Знач Путь) Экспорт
	Путь = БДД.ПолучитьПутьФайлаСУчетомПеременныхКонтекста(Путь);
	Путь = ЗаменитьШаблоныВПараметрахКоманды(Путь);
	Путь = ОбъединитьПути(ТекущийКаталог(), Путь);
	Если ФС.Существует(Путь) Тогда
		УдалитьФайлы(Новый Файл(Путь).ПолноеИмя);
	КонецЕсли;
КонецПроцедуры

// TODO исключить дублирование ЗаменитьШаблоныВПараметрахКоманды из 1bdd
Функция ЗаменитьШаблоныВПараметрахКоманды(Знач ПараметрыКоманды)
	КаталогПроекта = БДД.КаталогПроверяемогоПроекта();
	РабочийКаталог = РабочийКаталог();

	Лог.Отладка("ЗаменитьШаблоныВПараметрахКоманды ПараметрыКоманды %1", ПараметрыКоманды);

	Рез = СтрЗаменить(ПараметрыКоманды, "<КаталогПроекта>", КаталогПроекта);
	Рез = СтрЗаменить(Рез, "<РабочийКаталог>", РабочийКаталог);
	Если СтрНачинаетсяС(Рез, "КаталогПроекта") Тогда
		Рез = СтрЗаменить(ПараметрыКоманды, "КаталогПроекта", КаталогПроекта);
	КонецЕсли;
	Если СтрНачинаетсяС(Рез, "РабочийКаталог") Тогда
		Рез = СтрЗаменить(ПараметрыКоманды, "РабочийКаталог", РабочийКаталог);
	КонецЕсли;

	Рез = СтрЗаменить(Рез, "<КаталогПроектаДвойныеСлеши>", ЗаменитьСлешиНаДвойныеСлеши(КаталогПроекта));
	Рез = СтрЗаменить(Рез, "<РабочийКаталогДвойныеСлеши>", ЗаменитьСлешиНаДвойныеСлеши(РабочийКаталог));

	Рез = СтрЗаменить(Рез, "<КаталогПроектаПрямыеСлеши>", ЗаменитьСлешиНаПрямыеСлеши(КаталогПроекта));
	Рез = СтрЗаменить(Рез, "<РабочийКаталогПрямыеСлеши>", ЗаменитьСлешиНаПрямыеСлеши(РабочийКаталог));

	Лог.Отладка("ЗаменитьШаблоныВПараметрахКоманды Рез %1", Рез);
	Возврат Рез;
КонецФункции

Функция ЗаменитьСлешиНаДвойныеСлеши(Знач Строка)
	Рез = СтрЗаменить(Строка, "\", "\\");
	Возврат Рез;
КонецФункции

Функция ЗаменитьСлешиНаПрямыеСлеши(Знач Строка)
	Рез = СтрЗаменить(Строка, "\", "/");
	Возврат Рез;
КонецФункции
//}

Лог = Логирование.ПолучитьЛог("bdd.tests");
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
